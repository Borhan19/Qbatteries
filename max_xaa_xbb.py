# -*- coding: utf-8 -*-
"""Max Xaa Xbb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u1xzP8-CLiLBou-DYYM3oyb9pdXHhndi
"""


import qutip as qt
import numpy as np
import scipy
import matplotlib
import matplotlib.pylab as plt
import krotov
import math
from numpy import linalg as npla

def eigenvalues(A):
    eigenValues, eigenVectors = npla.eig(A)
    idx = np.argsort(eigenValues)
    eigenValues = eigenValues[idx]
    eigenVectors = eigenVectors[:,idx]
    return eigenValues
    
def eigenvectors(A):
    eigenValues, eigenVectors = npla.eig(A)
    idx = np.argsort(eigenValues)
    eigenValues = eigenValues[idx]
    eigenVectors = eigenVectors[:,idx]
    return eigenVectors

def H1_coeff(t, args):
      return  np.exp(-(t*1j*omega))

def H2_coeff(t, args):
      return  np.exp(t*1j*omega)

#For anaharmonicities

N=13
omega=1
Xaa=2
Xbb=0.09
F=0.1*omega
g=0.2*omega
alpha=0.5
Max=np.zeros((9,7))
l=-1
for Xaa in np.arange(0,4,0.5):
  l=l+1
  j=0
  for Xbb in np.arange(0,0.18,0.03):  
    HB=omega*qt.create(N)*qt.destroy(N)-Xbb/2*(qt.create(N)*qt.destroy(N)*qt.create(N)*qt.destroy(N))
    HA=omega*qt.create(N)*qt.destroy(N)-Xaa/2*(qt.create(N)*qt.destroy(N)*qt.create(N)*qt.destroy(N))
    HAB=g*(qt.tensor(qt.create(N),qt.destroy(N))+qt.tensor(qt.destroy(N), qt.create(N)))
    H1=qt.tensor(F*qt.create(N),qt.qeye(N))
    H2=qt.tensor(F*qt.destroy(N),qt.qeye(N))
    H0=qt.tensor(HA, qt.qeye(N))+qt.tensor(qt.qeye(N),HB)+HAB
    H=[H0, [H1, H1_coeff], [H2, H2_coeff]]
    t=np.linspace(0,30*math.pi/0.2,10000)
    psi0=qt.basis(N**2,0)
    output = qt.mesolve(H, psi0, t, [qt.tensor(np.sqrt(0.05*omega)*qt.destroy(N),qt.qeye(N))], [])
    Energy=np.zeros(10000)
    Ergotropy=np.zeros(10000)
    v=eigenvectors(HB)
    EntropyB=np.zeros(10000)
    Modulus=np.zeros(10000)
    for i in range (0,10000):
      A=np.array(output.states[i])
      FinalRho=np.trace(A.reshape(N,N,N,N), axis1=0, axis2=2)
      Cat=np.array(qt.coherent(N,alpha)-qt.coherent(N,-alpha))
      Cat=Cat/(np.sqrt(np.dot(np.transpose(Cat),Cat)))
      Modulus[i]=np.real(np.trace(np.dot(FinalRho,np.dot(Cat,np.transpose(Cat)))))
    Max[l,j]=np.max(Modulus)
    j=j+1

ind = np.unravel_index(np.argmax(Max, axis=None), Max.shape)
print(ind)
